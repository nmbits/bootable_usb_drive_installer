#!/bin/sh

PREREQ=""

# Output pre-requisites
prereqs()
{
    echo "$PREREQ"
}

case "$1" in
    prereqs)
        prereqs
        exit 0
        ;;
esac

. /scripts/functions
. /scripts/local

if [ -z $BTRFSROOT ]; then
    BTRFSROOT=/btrfs
fi

mkdir -p $BTRFSROOT

for x in $(cat /proc/cmdline); do
    case $x in
	ssroot=*)
	    SSROOT="${x#ssroot=}"
	    ;;
    esac
done

if [ "xy" != "x$SSROOT" ]; then
    exit 0
fi

MOUNTOPT=`echo -n $ROOTFLAGS | sed -e "s/^-o \+//"`

for x in `echo -n $MOUNTOPT | sed -e "s/,/ /g"`; do
    case $x in
	subvol=*)
	    SUBVOL=${x#subvol=}
	    ;;
	subvolid=*)
	    SUBVOLID=${x#subvolid=}
	    ;;
    esac
done

if [ -n "$SUBVOLID" ]; then
    exit 0
fi

if [ -z "$SUBVOL" ]; then
    panic "SUBVOL not detected"
    exit 0
fi

case $SUBVOL in
    /|*/)
	exit 0
	;;
esac

echo "SUBVOL=$SUBVOL"

for i in `seq 0 4`; do
    mount -t btrfs $ROOT -o subvol=/,ro $BTRFSROOT > /dev/null 2>&1
    if [ $? -eq 0 ]; then
	echo ""
	break
    fi
    echo -n "."
    sleep 1
done

if [ $? -ne 0 ]; then
    panic "ROOT dev mount error"
    exit 1
fi

for x in `btrfs subvolume list -o $BTRFSROOT | cut -d " " -f 9`; do
    num=`echo -n $x | sed -r "s/^$SUBVOL.([0-9]+)$/\1/"`
    if [ -n "$num" -a "$num" != "$x" ]; then
	if [ -z "$max" ]; then
	    max=$num
	elif [ $num -gt $max ]; then
	    max=$num
	fi
    fi
done

if [ -z "$max" ]; then
    SUBVOL_SS=$SUBVOL
else
    SUBVOL_SS=${SUBVOL}.${max}
fi

cat <<EOF > /conf/ssroot.conf
# This file is generated by ssroot.
# Do not remove.
ROOT=$ROOT
SUBVOL=$SUBVOL_SS
BASENAME=$SUBVOL
EOF

ROOTFLAGS=`echo -n $ROOTFLAGS | sed -e s/subvol=$SUBVOL/subvol=$SUBVOL_SS/g`
echo "ROOTFLAGS=\"${ROOTFLAGS}\"" >> /conf/param.conf

umount $BTRFSROOT
exit 0
